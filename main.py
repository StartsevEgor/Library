import sys
import os

from PyQt5 import uic, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QInputDialog, QTableWidgetItem, QColorDialog, \
    QMessageBox
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor, QPixmap
from main_window import Ui_MainWindow
from book_window import Ui_BookWindow
from choice_book_window import Ui_ChoiceBookWindow
from library import Library
from random import randint


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('main_window.ui', self)
        if not os.path.isdir("Libraries"):
            os.mkdir("Libraries")
        self.initUI()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è —à—Ä–∏—Ñ—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π
    # –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö; –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def initUI(self):
        if not os.path.isfile("settings.txt"):
            self.save_settings("MS Shell Dlg 2", "10", "#000000", "#ffffff")
        else:
            self.apply_settings()
        if not os.path.isdir("Last library"):
            self.lib = Library()
            self.lib.make()
        else:
            self.lib = Library(flag_new_file=False)
            self.lib.open()
        self.search_history = []
        self.history_cursor = 0
        self.setWindowTitle(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - {self.lib.name}")
        self.actionNew_library.triggered.connect(self.new_library)
        self.actionOpen.triggered.connect(self.open_library)
        self.actionOpenLastLibraries.triggered.connect(self.open_last_libraries)
        self.actionSave.triggered.connect(self.lib.save)
        self.actionSave_as.triggered.connect(self.save_as)
        self.actionRename.triggered.connect(self.rename)
        self.actionDelete.triggered.connect(self.delete)
        self.actionAdd_book.triggered.connect(self.open_choice_book)
        self.searchButton.clicked.connect(self.make_table)
        self.tableWidget.cellDoubleClicked.connect(self.search_if_item_is_clicked)
        self.actionChoose_a_font.triggered.connect(self.change_text_font)
        self.actionChange_size.triggered.connect(self.change_text_size)
        self.actionText_color.triggered.connect(self.change_text_color)
        self.actionBackground_color.triggered.connect(self.change_background_color)
        self.last_actionButton.clicked.connect(self.work_with_search_history)
        self.next_actionButton.clicked.connect(self.work_with_search_history)
        self.actionReference.triggered.connect(self.reference)
        self.make_table()

    def keyPressEvent(self, event):
        if event.key() in (Qt.Key_Enter, Qt.Key_Return):
            self.make_table()

    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
    def reference(self):
        with open("help.txt", "r", encoding="utf-8") as f:
            QMessageBox.question(self, '–°–ø—Ä–∞–≤–∫–∞', f.read())

    # –ú–µ—Ç–æ–¥ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫, –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –∑–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    def work_with_search_history(self):
        button_text = self.sender().text()
        button_action = -1 if button_text == "<" else 1
        if -(len(self.search_history)) <= (self.history_cursor + button_action) < 0:
            self.history_cursor += button_action
            author, title, year, genre = self.search_history[self.history_cursor]
            self.make_table(author, title, year, genre)
            self.authorEdit.setText(author)
            self.titleEdit.setText(title)
            self.yearEdit.setText(year)
            self.genreEdit.setText(genre)

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —à—Ä–∏—Ñ—Ç –∫–Ω–∏–≥–∏
    def change_text_font(self):
        fonts = ("MS Shell Dlg 2", "Arial Narrow", "Century Gothic", "Garamond", "Lucida Sans", "Palatino Linotype",
                 "Segoe UI", "Franklin Gothic Medium", "Book Antiqua", "Cambria", "Rockwell", "Trebuchet MS", "Impact",
                 "Comic Sans MS", "Georgia", "Tahoma", "Calibri", "Times New Roman", "Courier New", "Verdana",
                 "Candara")
        font, ok_pressed = QInputDialog.getItem(self, "–í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç", fonts,
                                                fonts.index(self.text_font), True)
        if ok_pressed:
            self.text_font = font
            self.save_settings(self.text_font, self.text_size, self.text_color, self.background_color)

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏
    def change_text_size(self):
        size, ok_pressed = QInputDialog.getInt(self, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä", "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
                                               int(self.text_size), 1, 60, 1)
        if ok_pressed:
            self.text_size = str(size)
            self.save_settings(self.text_font, self.text_size, self.text_color, self.background_color)

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏
    def change_text_color(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.text_color = color.name()
            self.save_settings(self.text_font, self.text_size, self.text_color, self.background_color)

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —Ñ–æ–Ω –∫–Ω–∏–≥–∏
    def change_background_color(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.background_color = color.name()
            self.save_settings(self.text_font, self.text_size, self.text_color, self.background_color)

    # –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è –∫–Ω–∏–≥–∏
    def save_settings(self, font, size, text_color, background_color):
        if os.path.isfile("settings.txt"):
            os.remove("settings.txt")
        with open("settings.txt", "w") as settings:
            settings.writelines([font + "\n", size + "\n", text_color + "\n", background_color + "\n"])
        self.text_font, self.text_size, self.text_color, self.background_color = [font, size, text_color,
                                                                                  background_color]

    # –ú–µ—Ç–æ–¥ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è –∫–Ω–∏–≥–∏
    def apply_settings(self):
        with open("settings.txt", "r") as settings:
            setting_list = list(map(lambda x: x.strip(), settings.readlines()))
            self.text_font, self.text_size, self.text_color, self.background_color = setting_list

    # –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É
    def make_table(self, author="", title="", year="", genre=""):
        if not self.yearEdit.text().isdigit() and self.yearEdit.text():
            self.statusbar.showMessage('–ó–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø–æ–ª–µ "–≥–æ–¥"')
        else:
            self.tableWidget.setColumnCount(5)
            self.tableWidget.setHorizontalHeaderLabels(["–ê–≤—Ç–æ—Ä", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ì–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏—è", "–ñ–∞–Ω—Ä", "–£–¥–∞–ª–∏—Ç—å"])
            if not any([author, title, year, genre]):
                data = self.search()
            else:
                data = self.lib.search(author, title, year, genre)
            self.tableWidget.setRowCount(len(data))
            for i, row in enumerate(data):
                for j, elem in enumerate(row):
                    self.tableWidget.setItem(i, j, QTableWidgetItem(elem))
                self.tableWidget.setItem(i, 4, QTableWidgetItem("üóë"))
                self.color_row(i, QColor(randint(100, 220), randint(100, 220), randint(100, 220)))
            self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.authorEdit.clear()
            self.titleEdit.clear()
            self.yearEdit.clear()
            self.genreEdit.clear()

    # –ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —è—á–µ–π–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã
    def search_if_item_is_clicked(self, row, col):
        item = self.tableWidget.item(row, col)
        if item.column() == 0:
            self.make_table(author=item.text())
        elif item.column() == 2:
            self.make_table(year=item.text())
        elif item.column() == 3:
            self.make_table(genre=item.text())
        elif item.column() == 4:
            title = self.tableWidget.item(row, 1).text()
            valid = QMessageBox.question(
                self, '', "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É?", QMessageBox.Yes, QMessageBox.No)
            if valid == QMessageBox.Yes:
                self.lib.remove_book(title)
                self.make_table()
        else:
            self.apply_settings()
            self.book = BookText(item.text(), self.lib.open_book(item.text()),
                                 [self.text_font, self.text_size, self.text_color, self.background_color])
            self.book.show()

    # –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∫–Ω–∏–≥–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    def search(self):
        search_by_author = self.authorEdit.text()
        search_by_title = self.titleEdit.text()
        search_by_year = self.yearEdit.text()
        search_by_genre = self.genreEdit.text()
        if any([search_by_author, search_by_title, search_by_year, search_by_genre]):
            self.search_history.append([search_by_author, search_by_title, search_by_year, search_by_genre])
            self.history_cursor = -1
        result = self.lib.search(search_by_author, search_by_title, search_by_year, search_by_genre)
        return result

    # –ú–µ—Ç–æ–¥ –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º–∏
    def color_row(self, row, color):
        for i in range(self.tableWidget.columnCount()):
            self.tableWidget.item(row, i).setBackground(color)

    # –ú–µ—Ç–æ–¥ —É–¥–∞–ª—è–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –∞ –∑–∞—Ç–µ–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é.
    def delete(self):
        os.remove(self.lib.name.strip())
        with open("last_libraries.txt", "r") as f:
            libraries = f.readlines()
        os.remove("last_libraries.txt")
        with open("last_libraries.txt", "w") as f:
            f.writelines(libraries[:-1])
        if len(libraries) > 1:
            self.lib = Library(flag_new_file=False)
            self.lib.open()
        else:
            self.lib = Library()
            self.lib.make()
        self.setWindowTitle(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - {self.lib.name}")

    # –ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    def rename(self):
        new_name, ok_pressed = QInputDialog.getText(self, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        if ok_pressed:
            self.lib.name = "/".join(self.lib.name.split("/")[:-1]) + "/" + new_name + ".lib"
            with open("last_libraries.txt", "r") as f:
                last_libraries = f.readlines()
                os.remove(last_libraries[-1].strip())
            os.remove("last_libraries.txt")
            with open("last_libraries.txt", "w") as f:
                f.writelines(last_libraries[:-1])
            self.lib.save()
        self.setWindowTitle(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - {self.lib.name}")

    # –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
    def save_as(self):
        with open("last_libraries.txt", "r") as libraries:
            last_directory = "/".join(libraries.readlines()[-1].split("/")[:-1])
        file = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", last_directory,
                                           "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ (*.lib);;–°–∂–∞—Ç–∞—è –ø–∞–ø–∫–∞(*.zip)")[0]
        os.remove(self.lib.name.strip())
        self.lib.name = file
        with open("last_libraries.txt", "r") as f:
            last_libraries = f.readlines()
        os.remove("last_libraries.txt")
        with open("last_libraries.txt", "w") as f:
            f.writelines(last_libraries[:-1])
        self.lib.save()
        self.setWindowTitle(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - {self.lib.name}")

    # –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    def new_library(self):
        self.lib.save()
        self.lib = Library()
        self.lib.make()
        self.setWindowTitle(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - {self.lib.name}")
        self.make_table()

    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏
    def open_library(self):
        with open("last_libraries.txt", "r") as libraries:
            last_directory = "/".join(libraries.readlines()[-1].split("/")[:-1])
        file_name = QFileDialog.getOpenFileName(self, "–í—ã–±—Ä–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", last_directory,
                                                "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ (*.lib);;–°–∂–∞—Ç–∞—è –ø–∞–ø–∫–∞(*.zip)")[0]
        if file_name:
            self.lib.save()
            self.lib = Library(file_name.strip(), flag_new_file=False)
            self.lib.open()
        self.setWindowTitle(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - {self.lib.name}")
        self.make_table()

    # –ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    def open_last_libraries(self):
        with open("last_libraries.txt", "r") as libraries:
            libraries = list(map(lambda x: x.strip(), libraries.readlines()))
        library, ok_pressed = (
            QInputDialog.getItem(self, "–í—ã–±—Ä–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É", libraries, 1, False))
        if ok_pressed:
            self.lib.save()
            self.lib = Library(library.strip(), flag_new_file=False)
            self.lib.open()
        self.setWindowTitle(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - {self.lib.name}")
        self.make_table()

    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    def open_choice_book(self):
        self.choice_book = ChoiceBook()
        self.choice_book.show()
        self.choice_book.add_bookButton.clicked.connect(self.set_data)
        self.choice_book.cancelButton.clicked.connect(self.choice_book.close)

    # –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
    def set_data(self):
        self.flag, self.author, self.title, self.year, self.genre, self.text, self.picture = self.choice_book.initUI()
        if self.flag:
            self.choice_book.close()
            self.lib.add_book(self.author, self.title, self.year, self.genre, self.text, self.picture)
            self.make_table(self.author, self.title, self.year, self.genre)


# –ö–ª–∞—Å—Å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏ —Å –æ–±–ª–æ–∂–∫–æ–π
class BookText(QMainWindow, Ui_BookWindow):
    def __init__(self, title, text_and_picture, font):
        super().__init__()
        uic.loadUi('book_window.ui', self)
        self.setFixedSize(600, 800)
        self.setWindowTitle(title)
        self.file_with_text, self.file_with_picture = text_and_picture
        self.picture_flag = True if self.file_with_picture.split("/")[-1] else False
        self.text_font, self.text_size, self.text_color, self.background_color = font
        if self.picture_flag:
            self.initPicture()
        else:
            self.label.deleteLater()
            self.initTextEdit()

    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–±–ª–æ–∂–∫—É –∫–Ω–∏–≥–∏
    def initPicture(self):
        pixmap = QPixmap(self.file_with_picture)
        scaled_pixmap = pixmap.scaled(600, 750, Qt.AspectRatioMode.KeepAspectRatio)
        self.label.setPixmap(scaled_pixmap)
        self.statusbar.showMessage("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ")

    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–∏–≥–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def initTextEdit(self):
        self.statusbar.showMessage("")
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.gridLayout.addWidget(self.textEdit, 0, 0, 1, 1)
        self.setCentralWidget(self.centralwidget)

        self.textEdit.setReadOnly(True)
        self.textEdit.setFocusPolicy(Qt.NoFocus)
        self.textEdit.installEventFilter(self)

        with open(self.file_with_text, 'r', encoding="utf-8") as file:
            self.text = file.read()
        self.textEdit.setAutoFillBackground(True)
        self.choice_font(self.text_font)
        self.choice_size(self.text_size)
        self.choice_text_color(self.text_color)
        self.choice_background_color(self.background_color)
        self.Choice_font_action.triggered.connect(self.choice_font)
        self.Choice_size_action.triggered.connect(self.choice_size)
        self.Choice_text_color_action.triggered.connect(self.choice_text_color)
        self.Choice_background_color_action.triggered.connect(self.choice_background_color)
        self.initText()

    # –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ textEdit
    def initText(self):
        self.textEdit.setText(self.text)

    # –ú–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –æ–±–ª–æ–∂–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É
    def keyPressEvent(self, event):
        if self.picture_flag:
            self.picture_flag = False
            self.label.deleteLater()
            self.initTextEdit()

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —à—Ä–∏—Ñ—Ç –∫–Ω–∏–≥–∏
    def choice_font(self, font=None):
        if font:
            self.textEdit.setFontFamily(font.strip())
            self.initText()
        else:
            fonts = ("MS Shell Dlg 2", "Arial Narrow", "Century Gothic", "Garamond", "Lucida Sans", "Palatino Linotype",
                     "Segoe UI", "Franklin Gothic Medium", "Book Antiqua", "Cambria", "Rockwell", "Trebuchet MS",
                     "Impact",
                     "Comic Sans MS", "Georgia", "Tahoma", "Calibri", "Times New Roman", "Courier New", "Verdana",
                     "Candara")
            font, ok_pressed = QInputDialog.getItem(self, "–í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç", fonts,
                                                    fonts.index(self.text_font), True)
            if ok_pressed:
                self.textEdit.setFontFamily(font)
                self.initText()
                self.text_font = font

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏
    def choice_size(self, size=None):
        if size:
            self.textEdit.setFontPointSize(int(size.strip()))
            self.initText()
        else:
            size, ok_pressed = QInputDialog.getInt(self, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä", "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
                                                   int(self.text_size), 1, 60, 1)
            if ok_pressed:
                self.textEdit.setFontPointSize(size)
                self.initText()
                self.text_size = str(size)

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏
    def choice_text_color(self, color=None):
        if color:
            self.textEdit.setTextColor(QColor(color.strip()))
            self.initText()
        else:
            color = QColorDialog.getColor()
            if color.isValid():
                self.textEdit.setTextColor(color)
                self.initText()
                self.text_color = color.name()

    # –ú–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–Ω–∏–≥–∏
    def choice_background_color(self, color=None):
        if color:
            self.textEdit.setStyleSheet(f"background-color: {color.strip()};")
            self.initText()
        else:
            color = QColorDialog.getColor()
            if color.isValid():
                self.textEdit.setStyleSheet(f"background-color: {color.name()};")
                self.initText()
                self.background_color = color.name()

    # –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è –∫–Ω–∏–≥–∏ –ø—Ä–∏ –µ—ë –∑–∞–∫—Ä—ã—Ç–∏–∏
    def closeEvent(self, event):
        if os.path.isfile("settings.txt"):
            os.remove("settings.txt")
        with open("settings.txt", "w") as settings:
            settings.writelines(
                [self.text_font + "\n", self.text_size + "\n", self.text_color + "\n", self.background_color + "\n"])
        event.accept()


# –ö–ª–∞—Å—Å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
class ChoiceBook(QMainWindow, Ui_ChoiceBookWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('choice_book_window.ui', self)
        self.text = ""
        self.picture = ""
        self.textButton.clicked.connect(self.change_file_with_text)
        self.pictureButton.clicked.connect(self.change_file_with_picture)

    # –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏
    def change_file_with_text(self):
        self.text = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "", "–¢–µ–∫—Å—Ç (*.txt)")[0]
        self.textEdit.setText(self.text)
        self.update()

    # –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏ –∫–Ω–∏–≥–∏
    def change_file_with_picture(self):
        types_pictures = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (*.png);;–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (*.jpg);;–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (*.jpeg);;–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (*.bmp)"
        self.picture = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º", "", types_pictures)[0]
        self.pictureEdit.setText(self.picture)
        self.update()

    # –ú–µ—Ç–æ–¥, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
    def initUI(self):
        author = self.authorEdit.text()
        title = self.titleEdit.text()
        year = self.yearEdit.text()
        genre = self.genreEdit.text()
        self.text = self.textEdit.text()
        self.picture = self.pictureEdit.text()
        if not all([author, title, year, genre, self.text]):
            flag = False
            self.statusbar.showMessage("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        elif not os.path.isfile(self.text):
            flag = False
            self.statusbar.showMessage("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º")
        elif not year.isdigit():
            flag = False
            self.statusbar.showMessage('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø–æ–ª–µ "–≥–æ–¥"')
        elif self.text.split(".")[-1] != "txt":
            flag = False
            self.statusbar.showMessage("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt")
        elif not os.path.isfile(self.picture) and self.picture != "":
            flag = False
            self.statusbar.showMessage("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±–ª–æ–∂–∫–æ–π")
        elif self.picture != "" and self.picture.split(".")[-1] not in ["png", "jpg", "jpeg", "bmp"]:
            flag = False
            self.statusbar.showMessage("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –æ–±–ª–æ–∂–∫–æ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png, .jpg, .jpeg –∏–ª–∏ .bmp")
        else:
            flag = True
        return flag, author, title, year, genre, self.text, self.picture


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    ex.show()
    sys.exit(app.exec())
